from collections import deque

class State:
    def __init__(self, missionaries_left, cannibals_left, boat_side):
        self.missionaries_left = missionaries_left
        self.cannibals_left = cannibals_left
        self.boat_side = boat_side  # 0 for left, 1 for right
        self.parent = None  # To trace the path back

    def __str__(self):
        return f"Missionaries: {self.missionaries_left}, Cannibals: {self.cannibals_left}, Boat side: {'Left' if self.boat_side == 0 else 'Right'}"

    def is_valid(self):
        if self.missionaries_left < 0 or self.cannibals_left < 0 or self.missionaries_left > 3 or self.cannibals_left > 3:
            return False
        if (self.missionaries_left > 0 and self.missionaries_left < self.cannibals_left) or \
           (3 - self.missionaries_left > 0 and 3 - self.missionaries_left < 3 - self.cannibals_left):
            return False
        return True

def bfs():
    # Initial state
    initial_state = State(3, 3, 0)  # All 3 missionaries and 3 cannibals on the left, boat on left

    # Goal state: All 3 missionaries and 3 cannibals on the right, boat on right
    goal_state = State(0, 0, 1)

    # Queue to explore the states, starting with the initial state
    queue = deque([initial_state])

    # Set to keep track of visited states
    visited = set()

    while queue:
        current_state = queue.popleft()
        
        # If we reached the goal, trace the path
        if current_state.missionaries_left == goal_state.missionaries_left and \
           current_state.cannibals_left == goal_state.cannibals_left and \
           current_state.boat_side == goal_state.boat_side:
            path = []
            while current_state:
                path.append(str(current_state))
                current_state = current_state.parent
            return path[::-1]  # Return the path from start to goal
        
        # Mark this state as visited
        visited.add((current_state.missionaries_left, current_state.cannibals_left, current_state.boat_side))

        # Generate possible moves and add them to the queue
        for m, c in [(2, 0), (1, 1), (0, 2), (1, 0), (0, 1)]:  # Possible moves: 2 missionaries, 1 cannibal, etc.
            if current_state.boat_side == 0:  # Boat on left side
                new_state = State(current_state.missionaries_left - m, current_state.cannibals_left - c, 1)
            else:  # Boat on right side
                new_state = State(current_state.missionaries_left + m, current_state.cannibals_left + c, 0)

            if new_state.is_valid() and (new_state.missionaries_left, new_state.cannibals_left, new_state.boat_side) not in visited:
                new_state.parent = current_state
                queue.append(new_state)

    return None  # Return None if no solution exists

def main():
    solution = bfs()
    if solution:
        print("Solution found:")
        for step in solution:
            print(step)
    else:
        print("No solution exists")

if __name__ == "__main__":
    main()
