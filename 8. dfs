class Graph:
    def __init__(self):
        self.graph = {}

    # Add an edge to the graph
    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append(v)
        self.graph[v].append(u)  # For undirected graph

    # Perform DFS traversal from the given node
    def dfs(self, start):
        visited = set()  # Set to keep track of visited nodes
        self.dfs_recursive(start, visited)

    # Recursive DFS helper function
    def dfs_recursive(self, node, visited):
        visited.add(node)
        print(node, end=" ")

        # Visit all unvisited neighbors
        for neighbor in self.graph.get(node, []):
            if neighbor not in visited:
                self.dfs_recursive(neighbor, visited)


# Example usage
g = Graph()
g.add_edge(1, 2)
g.add_edge(1, 3)
g.add_edge(2, 4)
g.add_edge(2, 5)
g.add_edge(3, 6)

print("DFS Traversal starting from node 1:")
g.dfs(1)  # Output: 1 2 4 5 3 6
